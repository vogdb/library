   В данном проекте показан результат моей работы над типичным заданием создания CRUD системы. Ниже кратко
описан этап анализа ТЗ.

Допустим нами было получено слеующее ТЗ от заказчика:
   Для городской библиотеки Простоквашино необходимо разработать систему учета читателей и книг.
Система должна хранить информацию о читателях и взятых ими книгах, также информацию обо всех книгах в целом.
Информация для хранения у книги:
            Название; Автор; Общее количество экземпляров книги; Рубрики, к которым относится; Свободна она или взята; Кем взята, если взята;
Информация для хранения о читателе
            ФИО; Информация о взятых книгах; Документ, удостоверяющий личность.

   Как видим, ТЗ, полученное нами, неполное. К примеру, не раскрыто в каком виде заказчик хотел бы видеть автора
книги, хватит ли ему просто ФИО автора или же нужно что-то больше. Не перечислены типы возможных документов для
читателя. Также заказчик не видит разницы между экземпляром книги и общей информацией для всех экзмепляров одной книги,
но в контексте он упоминает об этом. Так информация о названии, авторе, количестве экземпляров и рубрик - общая для
всех экзмепляров, а информация о связи книги с читателем - уникальна для каждого экземпляра книги.

   Сообщив заказчику о наших вопросах, мы приходим с ним к более детальным требованиям.
   Допустимыми документами являются: Лапы, усы и хвост. Более подробную информацию о полях документов мы самостоятельно 
должны узнать из законодательства Простоквашина. Достаточной информацией об авторе является ФИО и список всех его книг в библиотеке.
Также заказчик подтвердил, что мы должны делать различия между книгой и ее экземпляром, но как именно? Он затруднился ответить, и
полностью положился на нас в решении этой проблемы.

   Получив окончательные требования мы можем построить модель данных нашей будущей системы, она же диаграмма классов. Смотри
файл ClassDiagram.png.
   Создаем домены согласно полученной диаграме классов.
   Далее нас интересует функциональность на получении и возврате книги. Остальные стандартные функции CRUD могут быть сгенерированы
автоматически scaffolding'ом, поэтому опустим их. Начнем с определения сигнатур методов Book контроллера, ответственных за это.
Пусть это будут методы take для взятия и release для возврата книги. Метод take в качестве атрибутов принимает название книги и 
id читателя. Метод release - аналогично.
   take(title, readerId)
   release(title, readerId)

   Зная сигнатуры мы можем написать тесты. Смотри BookControllerTests.