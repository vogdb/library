   Welcome! This project isn't some ready to work system. It's only purpose to show analyse part of my work on creation
of typical CRUD system. Let's begin.

Let say we've got next Task:
   City library of Prostokvashino needs IT system to account it's books and readers. System must store information about
readers, reader's taken books and general book information.
Book store information:
    Title; Author; Number of books; Book's rubrics; Taken or not; Taken by who if taken
Reader store information:
    Name; Reader's books; Reader's document

    As we see, task that we've got is quite incomplete. For example, there is no information about how we should store
book's author. Should it be just author's name or more? There is no document type list for reader. Also customer doesn't
make any difference between book instance and general book information. He just mentioned it in the context. So information
about book title, author, number and rubrics - general information for all book instances, but link between book and reader
is unique for every book instance.

    So we ask customer our questions and after some conversation have more detailed task.
    Document list consists of: feets, ears and tail. More detailed information about document fields we should know by
ourselves from Prostokvashino's legislation. Sufficient information about author is his name and list of all his books in
library. Also customer approved that we must make difference between book and it's instance, but how exactly? He couldn't
answer and fully rely on our decision.

    After this final requirements we can build data model also known as class diagram for our future system. See file
ClassDiagram.png. Create our domains according to this class diagram.
    Let's consider our interest in reader's functionality on book taken and book return. Other standard CRUD functions
can be generated by scaffolding so drop them. Now we define method signatures of this operations for Book controller.
Let it be method take for action book taken and release for action book return. Define their signatures:
   take(title, readerId), title - book title, readerId - id of reader who wants book
   release(title, readerId), title - book title, readerId - id of reader who want to release book

    When we have these signature we can write test for them first. See BookControllerTests.
    With tests much easier write desired controller.

    At this point analyse part of task can be considered done if we drop out interface. There is only one thing that i
want to show you in interface. This is joint using of Bridge pattern and convention over configuration principe when
we create our own taglib. See LibraryTagLib. The scheme that used there with templateFamily let you easily change various taglib implementation
at runtime. Also there possibility to add them at runtime but i drop out this part of implementation.

    That's all. Thanks for your time.