   Welcome! This project isn't some ready for work system. It's only purpose is to give a short overview of my work on
typical task of creating a CRUD system model. Let's begin.

Let say we've got the following Task:
   City library of Prostokvashino needs an IT system for managing it's books and readers. System must store information
about readers, books that they've taken and general books information.
Book information must contain:
    Title; Author; Number of copies; Book's rubrics; Taken (by whom) or not.
Reader information must contain:
    Name; taken books; identification document.

    As we can see, task description is quite incomplete. For example, there is no information about how we should store
book's author. Should it be just author's name? Reader's identification document type is not specified. Also customer doesn't
make any difference between 1 book copy information and general book information. He just mentioned it in the context.
So information about book title, author, number and rubrics is the same for all copies of that book, but link between
book and reader is unique for every book copy.

    So we ask customer our questions and after a conversation we have more detailed task.
    Acceptable ID document list includes driver license abd passport. More detailed information about document fields we
can obtain by ourselves from, for example, Prostokvashino's legislation. Sufficient information about an author is his
name and a list of all his books in the library. Also customer approved that we must make difference between book and
it's copy, but didn't specified how exactly. He fully relied on our decision.

    After getting these final requirements, we can build data model (also known as class diagram) for our future system.
See file ClassDiagram.png. Create our domains accordingly to this class diagram.
    Let's have a closer look on reader's functionality of taking and returning a book. Other standard CRUD functions
can be generated by scaffolding so we won't discuss them. Let's define method signatures of these operations for Book controller:
method "take" for action "book taken" and "release" for action "book return". Define their signatures as follows:
   take(title, readerId), title - book title, readerId - id of reader who wants to take the book
   release(title, readerId), title - book title, readerId - id of reader who wants to return the book

    When we have these signatures we should write tests for them first. See BookControllerTests.
    It is much easier to write a desired controller with them.

    Now the only thing left is to describe an interface. There is only one thing that i
would like to highlight here. It is joint using of Bridge pattern and "convention over configuration" principle in case
we need to create our own taglib. See LibraryTagLib. The scheme that is used there with templateFamily allows you to
easily switch various taglib implementations during the runtime. Also you can add them at the runtime but it is out of
the scope of this article.

    That's all. Thanks for your time.